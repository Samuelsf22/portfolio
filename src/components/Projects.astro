---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import jgb from "@/assets/project-jgb.webp";
import ec from "@/assets/project-ec.webp";

import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "@/components/ui/badge";
import CodeDropdown from "@/components/CodeDropdown";

import { Button } from "./ui/button";
import { Github, Link } from "lucide-react";

const TAGS = {
  ASTRO: {
    name: "Astro",
    icon: "vscode-icons:file-type-astro",
  },
  REACT: {
    name: "React",
    icon: "vscode-icons:file-type-reactjs",
  },
  TAILWIND: {
    name: "Tailwind CSS",
    icon: "vscode-icons:file-type-tailwind",
  },
  ANGULAR: {
    name: "Angular",
    icon: "vscode-icons:file-type-angular",
  },
  SPRING: {
    name: "Spring",
    icon: "devicon:spring",
  },
  POSTGRESQL: {
    name: "PostgreSQL",
    icon: "devicon:postgresql",
  },
  DJANGO: {
    name: "Django",
    icon: "vscode-icons:file-type-django",
  },
};

const PROJECTS = [
  {
    title: "E-Commerce App",
    description:
      "Proyecto de e-commerce desarrollado con Angular y Tailwind CSS, con funcionalidades de carrito de compras, filtrado de productos y autenticación de usuarios. Además, se implementó un backend en Spring WebFlux y PostgreSQL para la gestión de productos y usuarios.",
    link: "https://e-commerce-a19.vercel.app/",
    github: {
      frontend: "https://github.com/Samuelsf22/e-frontend",
      backend: "https://github.com/Samuelsf22/e-backend",
    },
    image: ec,
    tags: [TAGS.ANGULAR, TAGS.TAILWIND, TAGS.SPRING, TAGS.POSTGRESQL],
  },
  {
    title: "JGB - Gestión Académica para Instituciones Educativas",
    description:
      "Sistema de gestión académica para instituciones educativas, desarrollado con Astro, React y Tailwind CSS en el frontend, y Django REST Framework en el backend. Permite la gestión de estudiantes, docentes, cursos y calificaciones.",
    link: "https://jgb-management-astro-frontend.vercel.app/",
    github: {
      frontend: "https://github.com/Samuelsf22/jgb-frontend",
      backend: "https://github.com/DavidPPizarro/sga_api",
    },
    image: jgb,
    tags: [TAGS.ASTRO, TAGS.REACT, TAGS.TAILWIND, TAGS.DJANGO, TAGS.POSTGRESQL],
  },
];
---

<Card className="bg-transparent shadow-none border-none">
  <CardHeader>
    <CardTitle className="text-4xl text-center">Proyectos</CardTitle>
  </CardHeader>
  <CardContent className="space-y-8">
    {
      PROJECTS.map(({ title, description, link, github, image, tags }) => (
        <Card className="bg-transparent shadow-none border-none">
          <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
            <div class="w-full md:w-1/2">
              <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-0 md:group-hover:shadow-2xl">
                <Image
                  alt="Project Image"
                  class="object-cover w-full h-56 transition duration-300 sm:h-full md:scale-110 md:group-hover:scale-100"
                  loading="lazy"
                  src={image}
                />
              </div>
            </div>

            <div class="w-full md:w-1/2 md:max-w-lg flex flex-col justify-between gap-y-2">
              <div class="space-y-2">
                <h3 class="text-2xl font-bold">{title}</h3>
                <ul class="flex flex-wrap gap-2">
                  {tags.map((tag) => (
                    <li>
                      <Badge variant="secondary" className="gap-2">
                        <Icon name={tag.icon} class="size-4" />
                        {tag.name}
                      </Badge>
                    </li>
                  ))}
                </ul>
              </div>
              <p class="text-muted-foreground text-pretty">{description}</p>
              <footer class="flex gap-x-2">
                {github && <CodeDropdown github={github} client:idle/>}
                {link && (
                  <a href={link} target="_blank">
                    <Button variant="outline" className="rounded-full">
                      <Link />
                      Ver Proyecto
                    </Button>
                  </a>
                )}
              </footer>
            </div>
          </article>
        </Card>
      ))
    }
  </CardContent>
</Card>
